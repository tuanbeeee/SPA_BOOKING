// <auto-generated />
using System;
using Infrastructure.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(SpaBookingDBContext))]
    [Migration("20230518163815_UpdateDatabase")]
    partial class UpdateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BussinessObject.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.Appointment", b =>
                {
                    b.Property<long>("appointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("appointmentId"));

                    b.Property<long?>("customerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("endTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("staffId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("appointmentId");

                    b.HasIndex("customerId");

                    b.HasIndex("staffId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("BussinessObject.Models.Appointment_Detail", b =>
                {
                    b.Property<long>("appointmentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("appointmentDetailId"));

                    b.Property<long>("appointmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("serviceId")
                        .HasColumnType("bigint");

                    b.HasKey("appointmentDetailId");

                    b.HasIndex("appointmentId");

                    b.HasIndex("serviceId");

                    b.ToTable("AppointmentDetail");
                });

            modelBuilder.Entity("BussinessObject.Models.Customer", b =>
                {
                    b.Property<long>("customerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("customerId"));

                    b.Property<string>("accountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("customerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerGender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("customerId");

                    b.HasIndex("accountId")
                        .IsUnique()
                        .HasFilter("[accountId] IS NOT NULL");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("BussinessObject.Models.Discount", b =>
                {
                    b.Property<long>("discountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("discountId"));

                    b.Property<double>("discountAmount")
                        .HasColumnType("float");

                    b.Property<long>("discountCode")
                        .HasColumnType("bigint");

                    b.Property<int>("discountType")
                        .HasColumnType("int");

                    b.Property<DateTime>("expireDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("serviceId")
                        .HasColumnType("bigint");

                    b.HasKey("discountId");

                    b.HasIndex("serviceId");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("BussinessObject.Models.Payment", b =>
                {
                    b.Property<long>("paymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("paymentId"));

                    b.Property<long>("appointmentId")
                        .HasColumnType("bigint");

                    b.Property<double>("paymentAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("paymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("paymentId");

                    b.HasIndex("appointmentId")
                        .IsUnique();

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("BussinessObject.Models.Review", b =>
                {
                    b.Property<long>("reviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("reviewId"));

                    b.Property<long?>("customerId")
                        .HasColumnType("bigint");

                    b.Property<string>("reviewContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("reviewRate")
                        .HasColumnType("int");

                    b.Property<long?>("serviceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("staffId")
                        .HasColumnType("bigint");

                    b.HasKey("reviewId");

                    b.HasIndex("customerId");

                    b.HasIndex("serviceId");

                    b.HasIndex("staffId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("BussinessObject.Models.Service", b =>
                {
                    b.Property<long>("serviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("serviceId"));

                    b.Property<string>("serviceDuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("serviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("servicePrice")
                        .HasColumnType("float");

                    b.Property<long>("spaId")
                        .HasColumnType("bigint");

                    b.HasKey("serviceId");

                    b.HasIndex("spaId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("BussinessObject.Models.Spa", b =>
                {
                    b.Property<long>("spaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("spaId"));

                    b.Property<string>("spaAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("spaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("spaEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("spaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("spaPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("spaId");

                    b.ToTable("Spa");
                });

            modelBuilder.Entity("BussinessObject.Models.Staff", b =>
                {
                    b.Property<long>("staffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("staffId"));

                    b.Property<string>("accountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("spaId")
                        .HasColumnType("bigint");

                    b.Property<string>("staffEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("staffGender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("staffName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("staffPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("staffId");

                    b.HasIndex("accountId")
                        .IsUnique()
                        .HasFilter("[accountId] IS NOT NULL");

                    b.HasIndex("spaId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BussinessObject.Models.Appointment", b =>
                {
                    b.HasOne("BussinessObject.Models.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("customerId");

                    b.HasOne("BussinessObject.Models.Staff", "Staff")
                        .WithMany("Appointments")
                        .HasForeignKey("staffId");

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BussinessObject.Models.Appointment_Detail", b =>
                {
                    b.HasOne("BussinessObject.Models.Appointment", "Appointment")
                        .WithMany("Appointment_Details")
                        .HasForeignKey("appointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObject.Models.Service", "Service")
                        .WithMany("Appointment_Details")
                        .HasForeignKey("serviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BussinessObject.Models.Customer", b =>
                {
                    b.HasOne("BussinessObject.Models.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("BussinessObject.Models.Customer", "accountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BussinessObject.Models.Discount", b =>
                {
                    b.HasOne("BussinessObject.Models.Service", "Service")
                        .WithMany("Discounts")
                        .HasForeignKey("serviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BussinessObject.Models.Payment", b =>
                {
                    b.HasOne("BussinessObject.Models.Appointment", "Appointment")
                        .WithOne("Payment")
                        .HasForeignKey("BussinessObject.Models.Payment", "appointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("BussinessObject.Models.Review", b =>
                {
                    b.HasOne("BussinessObject.Models.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("customerId");

                    b.HasOne("BussinessObject.Models.Service", "Service")
                        .WithMany("Reviews")
                        .HasForeignKey("serviceId");

                    b.HasOne("BussinessObject.Models.Staff", "Staff")
                        .WithMany("Reviews")
                        .HasForeignKey("staffId");

                    b.Navigation("Customer");

                    b.Navigation("Service");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BussinessObject.Models.Service", b =>
                {
                    b.HasOne("BussinessObject.Models.Spa", "Spa")
                        .WithMany("Services")
                        .HasForeignKey("spaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Spa");
                });

            modelBuilder.Entity("BussinessObject.Models.Staff", b =>
                {
                    b.HasOne("BussinessObject.Models.Account", "Account")
                        .WithOne("Staff")
                        .HasForeignKey("BussinessObject.Models.Staff", "accountId");

                    b.HasOne("BussinessObject.Models.Spa", "Spa")
                        .WithMany("Staffs")
                        .HasForeignKey("spaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Spa");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BussinessObject.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BussinessObject.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObject.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BussinessObject.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BussinessObject.Models.Account", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BussinessObject.Models.Appointment", b =>
                {
                    b.Navigation("Appointment_Details");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BussinessObject.Models.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BussinessObject.Models.Service", b =>
                {
                    b.Navigation("Appointment_Details");

                    b.Navigation("Discounts");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BussinessObject.Models.Spa", b =>
                {
                    b.Navigation("Services");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("BussinessObject.Models.Staff", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
